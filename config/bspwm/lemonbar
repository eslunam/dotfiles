#!/usr/bin/env bash

sep="  "

main() {
    # set up panel size
    local res="" width="" height=""
    res=$(xdpyinfo | awk '/dimensions:/ { print $2 }')
    width=$(printf "%s" "$res" | cut -d 'x' -f 1)
    height=$(printf "%s" "$res" | cut -d 'x' -f 2)
    local panel_height=$((height/36))
    local panel_dimensions="${width}x${panel_height}+0+0"

    bspc config bottom_padding "$panel_height"

    local panel_font="Source Code Pro-9"
    local icon_font="FontAwesome-11"

    # colours from gruvbox palette
    local panel_bg="$WM_BLACK"
    local panel_fg="$WM_WHITE"
    local panel_grey="$WM_GREY"
    local panel_green="$WM_GREEN"

    local fifo="/tmp/panel_fifo"
    [ -e "$fifo" ] && rm "$fifo"
    mkfifo "$fifo"

    bspc subscribe report > "$fifo" &

    local desktop_num=""
    desktop_num=$(bspc query -D | wc -l)

    while true; do windows; sleep 0.033s; done > "$fifo" &
    #while true; do check_updates; sleep 30m; done > "$fifo" &
    while true; do disks; sleep 40s; done > "$fifo" &
    while true; do address; sleep 10s; done > "$fifo" &
    while true; do battery; sleep 30s; done > "$fifo" &
    while true; do volume; sleep 0.033s; done > "$fifo" &
    while true; do clock; sleep 60s; done > "$fifo" &

    while read -r line; do
        case "$line" in
            WM*)
                desktops="$(printf "%s" "$line" | tr ':' '\n' | tail -n+2 | head -n "$desktop_num" | desktops)" ;;
            "windows|"*)
                windows="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
            "updates|"*)
                updates="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
            "checkupdates")
                updates="$(printf "%s" "$(check_updates)" | cut -d '|' -f 2)" ;;
            "disks|"*)
                disks="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
            "address|"*)
                address="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
            "battery|"*)
                battery="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
            "volume|"*)
                volume="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
            "clock|"*)
                clock="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
        esac

        printf "%s\n" "%{l}${desktops}${windows}%{r}${updates}${disks}${address}${battery}${volume}${clock} "
    done < "$fifo" | lemonbar -p -b -g "$panel_dimensions" -a 99 -f "$panel_font" -f "$icon_font" -B "$panel_bg" -F "$panel_fg" | busybox ash
}

desktops() {
    local list=""
    while read -r desktop; do
        local token="${desktop:0:1}"
        name="$(printf "%s" "$desktop" | sed 's/^.//')"
        local output="%{A:bspc desktop -f \"${name}\":} ${name} %{A}"
        case "$token" in
            O|F)
                output="%{R}${output}%{R}" ;;
            f)
                output="%{F${panel_grey}}${output}%{F-}" ;;
        esac

        list="${list}${output}"
    done

    printf "%s\n" "$list"
}

windows() {
    # pipe output to allow loop to modify list variable
    bspc query -N -n .window -d focused | nodes
}

nodes() {
    local list="windows| "
    local active=""
    active="$(bspc query -N -n)"
    while read -r id; do
        [ -z "$id" ] && continue

        local name=""
        name="$(xprop -id "$id" WM_CLASS | awk -F '"' '{ print tolower($4) }')"

        [ "${#name}" -gt 16 ] && name="${name:0:16}"

        # left click to focus, middle click to close
        name="%{A:bspc node -f ${id}:} ${name} %{A}"
        #name="%{A2:xkill -id ${id}:}${name}%{A}"
        name="%{A2:bspc node ${id} -c:}${name}%{A}"

        # highlight if focused
        [ "$id" = "$active" ] && name="%{R}${name}%{R}"
        list="${list}${name} "
    done

    printf "%s\n" "$list"
}

check_updates() {
    local pac="" aur=""
    pac=$(checkupdates | wc -l)
    aur=$(cower -u | wc -l)
    local num=$((pac+aur))
    printf "%s\n" "updates|  %{A:echo \"checkupdates\" > \"${fifo}\":} ï€¡ ${num}%{A}"
}

disks() {
    local root home
    root="root: $(disk_percent /)"
    home="home: $(disk_percent /home)"

    printf "%s\n" "disks|${sep}${root}, ${home}"
}

disk_percent() {
    df -P "$1" | awk '/%/ { print $5 }'
}

address() {
    local output="address|"
    local addr=""
    addr="$(ip route | awk '/default/ { print $7 }')"
    [ ! -z "$addr" ] && output="${output}${sep}%{F${panel_green}}${addr}%{F-}"
    printf "%s\n" "$output"
}

battery_old() {
    local output="battery|"
    local bat=""
    bat="$(acpi -b | sed 's/,//g')"
    if [ ! -z "$bat" ]; then
        local percent="" charging=""
        percent="$(printf "%s" "$bat" | cut -d ' ' -f 4)"
        charging="$(printf "%s" "$bat" | cut -d ' ' -f 3)"

        [ "$charging" = "Charging" ] && charging='+' || charging='-'

        output="${output}${sep}bat: ${percent} (${charging})"
    fi

    printf "%s\n" "$output"
}

bat_location="/sys/class/power_supply/BAT0"
battery() {
    local output="battery|"
    if [ -e "$bat_location" ]; then
        local current="" max=""
        current="$(cat "${bat_location}/energy_now")"
        max="$(cat "${bat_location}/energy_full")"

        local percent="$((100*current/max))%"

        local charging=""
        [ "$(cat "${bat_location}/status")" = "Charging" ] && charging='+' || charging='-'

        output="${output}${sep}bat: ${percent} (${charging})"
    fi

    printf "%s\n" "$output"
}

vol_toggle="%{A2:pamixer -t:}"
vol_up="%{A4:pamixer -i 1:}"
vol_down="%{A5:pamixer -d 1:}"
vol_label="vol: "
vol_prefix="${vol_toggle}${vol_up}${vol_down}"
vol_suffix="%{A}%{A}%{A}"
volume() {
    local vol=""
    [ "$(pamixer --get-mute)" = "true" ] && vol="mute" || vol="$(pamixer --get-volume)%"
    printf "%s\n" "volume|${sep}${vol_prefix}${vol_label}${vol}${vol_suffix}"
}

clock() {
    local date=""
    date="$(date '+%A, %Y/%m/%d %H:%M')"
    printf "%s\n" "clock|${sep}${date}"
}

main
