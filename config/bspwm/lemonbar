#!/bin/ash

set -e

res=$(xdpyinfo | awk '/dimensions:/ { print $2 }')
width=$(printf "%s" "$res" | cut -d 'x' -f 1)
height=$(printf "%s" "$res" | cut -d 'x' -f 2)
panel_height=$((height/36))
panel_dimensions="${width}x${panel_height}+0+0"

panel_font="Source Code Pro-9"
icon_font="FontAwesome-11"

panel_bg="#ff3c3836"
panel_fg="#ffebdbb2"
panel_grey="#ff928374"
panel_green="#ffb8dd26"

if [ "$(pgrep -x lemonbar | wc -l)" -gt 0 ]; then
    printf "%s\n" "The panel is already running." >&2
    exit 1
fi

bspc config bottom_padding "$panel_height"

trap 'trap - TERM; kill 0' INT TERM QUIT EXIT

fifo="/tmp/panel_fifo"
[ -e "$fifo" ] && rm "$fifo"
mkfifo "$fifo"

bspc subscribe report > "$fifo" &

desktops() {
    local list=""
    while read -r desktop; do
        local status="${desktop:0:1}"
        local name
        name=$(printf "%s" "$desktop" | sed 's/^.//')
        local output="%{A:bspc desktop -f \"${name}\":} ${name} %{A}"
        case "$status" in
            O|F)
                output="%{R}${output}%{R}" ;;
            f)
                output="%{F${panel_grey}}${output}%{F-}" ;;
        esac

        list="${list}${output}"
    done

    printf "%s\n" "$list"
}

windows() {
    bspc query -N -n .window -d focused | nodes
}

nodes() {
    local list="windows|"
    local active
    active="$(bspc query -N -n)"
    while read -r id; do
        [ -z "$id" ] && continue
        local name=""
        name=$(xprop -id "$id" WM_CLASS | awk -F '"' '{ print tolower($4) }')
        name="%{A:bspc node -f ${id}:} ${name} %{A}"
        name="%{A2:xkill -id ${id}:}${name}%{A}"
        [ "$id" = "$active" ] && name="%{R}${name}%{R}"
        list="${list}${name} "
    done

    printf "%s\n" "${list}"
}

disks() {
    local root home
    root="root: $(disk_percent /)"
    home="home: $(disk_percent /home)"

    printf "%s\n" "disks|  ${root}, ${home} "
}

disk_percent() {
    df -P "$1" | awk '/%/ { print $5 }'
}

address() {
    local output="address| "
    local addr
    addr="$(ip route | awk '/default/ { print $7 }')"
    [ ! -z "$addr" ] && output="${output} %{F${panel_green}}${addr} %{F-}"
    printf "%s\n" "$output"
}

battery() {
    local output="battery|"
    local status
    status="$(acpi -b | sed 's/,//g')"
    if [ ! -z "$status" ]; then
        local percent charging
        charging=$(printf "%s" "$status" | cut -d ' ' -f 3)
        percent=$(printf "%s" "$status" | cut -d ' ' -f 4)
        [ "$charging" = "Charging" ] && charging='+' || charging='-'

        output="${output}bat: ${percent} (${charging})"
    fi

    printf "%s\n" "$output"
}


vol_toggle="%{A2:pamixer -t:}"
vol_up="%{A4:pamixer -i 1:}"
vol_down="%{A5:pamixer -d 1:}"
vol_label="vol: "
vol_prefix="${vol_toggle}${vol_up}${vol_down}"
vol_suffix="%{A}%{A}%{A}"

volume() {
    local vol
    [ "$(pamixer --get-mute)" = "true" ] && vol="mute" || vol="$(pamixer --get-volume)%"
    printf "%s\n" "volume|${vol_prefix} ${vol_label}${vol} ${vol_suffix}"
}

clock() {
    local date
    date=$(date '+ %A, %Y/%m/%d %H:%M')
    printf "%s\n" "clock|${date}"
}

while true; do windows; sleep 0.033s; done > "$fifo" &
while true; do disks; sleep 30s; done > "$fifo" &
while true; do address; sleep 10s; done > "$fifo" &
while true; do volume; sleep 0.034s; done > "$fifo" &
while true; do clock; sleep 60s; done > "$fifo" &

while read -r line; do
    case $line in
        WM*)
            desktops=$(printf "%s" "$line" | tr ':' '\n' | tail -n+2 | head | desktops) ;;
        "windows|"*)
            windows="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
        "disks|"*)
            disks="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
        "address|"*)
            address="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
        "volume|"*)
            volume="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
        "clock|"*)
            clock="$(printf "%s" "$line" | cut -d '|' -f 2)" ;;
    esac

    printf "%s\n" "%{l}${desktops} %{r}${windows}${disks}${address}${volume}${clock} "
done < "$fifo" | lemonbar -p -b -g "$panel_dimensions" -a 99 -f "$panel_font" -f "$icon_font" -B "$panel_bg" -F "$panel_fg" | ash
